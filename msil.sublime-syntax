%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: MSIL
file_extensions: [il, msil]
scope: source.msil
variables:
  keyword_pseudo1: assembly|extern|module|namespace|class|value|enum|field|method|public|private|family|famandassem|famorassem|privatescope|permissionset|vtfixup|vtentry|export
  keyword_pseudo2: auto|sequential|explicit|ansi|unicode|autochar|extends|implements|static|entrypoint|locals|init|at|data|explicit|size|pack|custom|permission|corflags
  keyword_pseudo3: pinvokeimpl|cdecl|cil|managed|unmanaged|native|try|to|handler|catch|filter|finally|fault|noappdomain|noprocess|nomachine|hash|algorithm|ver|publickey|locale
  keyword_pseudo4: publickeytoken|as|file|nometadata|mresource|at|nested|interface|abstract|sealed|specialname|import|serializable|beforefieldinit|demand|language|line
  keyword_pseudo5: rtspecialname|hidebysig|instance|runtime|virtual|newslot|modreq|modopt|pinned|initonly|literal|notserialized|marshal|final|property|set|get|maxstack
  keyword_pseudo6: unmanagedexp|reqsecobj|optial|forwardref|preservesig|internalcall|synchronized|noinlining|in|out|opt|param|override|event|addon|removeon|fire|other
  keyword_pseudo7: subsystem|file\salignment|imagebase|fromunmanaged|callmostderived|with|emitbyte|zeroinit|
  keyword_pseudo: '{{keyword_pseudo7}}|{{keyword_pseudo1}}|{{keyword_pseudo2}}|{{keyword_pseudo3}}|{{keyword_pseudo4}}|{{keyword_pseudo5}}|{{keyword_pseudo6}}'
  keyword_libname: mscorlib
  keyword_stdtype1: void|bool|char|int8|int16|int32|int64|uint8|uint32|float32|float64|typedref|unsigned|object
  keyword_stdtype2: System|Object|ValueType|Enum|Exception|Console|string|valuetype|vararg|bytearray|true|false
  keyword_stdtype: '{{keyword_stdtype1}}|{{keyword_stdtype2}}'
  keyword_stdfunc: WriteLine|ReadLine

  inst_loadconst:  ldloc\.[0-3,s]|ldloc|ldloca(\.s)?|ldc\.i4\.[0-8]|ldc\.i4\.m1|ldc\.i4\.s|ldc\.i4|ldc\.(i8|r4|r8)|ldfld|ldflda|ldsfld|ldsflda|ldftn|ldvirtftn|ldtoken
  inst_loadother: ldnull|ldstr|ldobj
  inst_loadargs: ldarg(\.(s|0|1|2|3))?|ldarga(\.s)?
  inst_loadind: ldind\.(i1|i2|i4|i8|i|u1|u2|u4|u8|r4|r8|ref)
  inst_storind: stind\.(i1|i2|i4|i8|i|r4|r8|ref)
  inst_store: stloc(\.[0-3,s])?|stfld|stsfld|starg(\.s)?|stobj
  inst_loads: '{{inst_loadconst}}|{{inst_loadind}}|{{inst_loadargs}}|{{inst_loadother}}'
  inst_stores: '{{inst_store}}|{{inst_storind}}'
  inst_stack: dup|arglist|nop|pop|localloc
  inst_calc: and|or|xor|not|add\.ovf\.un|add\.ovf|add|sub\.ovf\.un|sub\.ovf|sub|mul\.ovf\.un|mul\.ovf|mul|div\.un|div|rem\.un|rem|neg|shl|shr\.un|shr
  inst_conv: conv\.(i1|i2|i4|i8|i|u1|u2|u4|u8|u|r4|r8|r\.un)|conv\.ovf\.(i1|i2|i4|i8|i|u1|u2|u4|u8|u)(\.un)?
  inst_check: ceq|cgt\.un|cgt|clt\.un|clt|ckfinite|cpblk|initblk|isinst|sizeof|throw|rethrow
  inst_calcs: '{{inst_calc}}|{{inst_conv}}'
  inst_jump: br(false|null|zero|true|inst)?(\.s)?|b(eq|ne\.un|ge\.un|ge|gt\.un|gt|le\.un|le|lt\.un|lt)(\.s)?|switch|break|ret|leave(\.s)?
  inst_call: call|calli|callvirt|jmp
  inst_objs: newobj|cpobj|initobj|castclass|box|unbox|mkrefany|refanytype|refanyval|volatile|unaligned|tail
  inst_arry: newarr|ldlen|ldelema|ldelem\.(i1|u1|i2|u2|i4|u4|i8|i|r4|r8|ref)|stelem\.(i1|i2|i4|i8|i|r4|r8|ref)
  inst_preudo: endfinally|endfilter|endfault|catch
  inst_all: '{{inst_loads}}|{{inst_stores}}|{{inst_stack}}|{{inst_calcs}}|{{inst_jump}}|{{inst_call}}|{{inst_objs}}|{{inst_arry}}|{{inst_preudo}}'

contexts:
  main:
    - include: pinstruction
    - include: rinstruction
    - include: comments
    - match: '"'
      push: string

  string:
    - meta_scope: string.quoted.double.msil
    - match: \\.
      scope: constant.character.escape.msil
    - match: '"'
      pop: true

  comments:
    - match: '//'
      scope: punctuation.definition.comment.cs
      push:
        - meta_scope: comment.line.double-slash.cs
        - match: $\n?
          pop: true

  pinstruction:
    - match: ^\s*\.
      scope: keyword.control.msil
      push: 
        - meta_content_scope: markup.italic
        - include: pseudo_keywords
        - include: libfiles
        - include: typenames
        - match: \n|\{
          pop: true

  rinstruction:
    - include: label
    - include: instructionline
    - include: typenames
    - include: libfiles
    - match: '{{keyword_stdfunc}}'
      scope: entity.name.tag

  label:
    - match: '^\s*(\w)+:'
      scope: markup.italic

  instructionline:
    - match: \b({{inst_all}})\b
      scope: keyword.operator.msil

  typenames:
    - match: \b({{keyword_stdtype}}(\.|::)?)+
      scope: support.type.msil

  libfiles:
    - match: \b({{keyword_libname}})\b
      scope: entity.name.msil

    - match: \[{{keyword_libname}}\]
      scope: entity.name.msil

  pseudo_keywords:
    - match: '\b({{keyword_pseudo}})\b'
      scope: keyword.control.msil
