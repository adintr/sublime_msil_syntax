%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: MSIL
file_extensions: [il, msil]
scope: source.msil
variables:
  keyword_pseudo1: assembly|extern|module|namespace|class|value|enum|field|method|public|private|family|famandassem|famorassem|privatescope
  keyword_pseudo2: auto|sequential|explicit|ansi|unicode|autochar|extends|implements|static|entrypoint|locals|init|at|data|explicit|size|pack
  keyword_pseudo3: pinvokeimpl|cdecl|cil|managed|unmanaged|native|try|noappdomain|noprocess|nomachine|hash|algorithm|ver|publickey|locale
  keyword_pseudo4: publickeytoken|as|file|nometadata|mresource|at|nested|interface|abstract|sealed|specialname|import|serializable|beforefieldinit
  keyword_pseudo5: rtspecialname|hidebysig|instance|runtime|virtual|newslot|modreq|modopt|pinned|initonly|literal|notserialized|marshal|final
  keyword_pseudo6: unmanagedexp|reqsecobj|optial|forwardref|preservesig|internalcall|synchronized|noinlining|in|out|opt|param|override|
  keyword_pseudo: '{{keyword_pseudo1}}|{{keyword_pseudo2}}|{{keyword_pseudo3}}|{{keyword_pseudo4}}|{{keyword_pseudo5}}|{{keyword_pseudo6}}'
  keyword_libname: mscorlib
  keyword_stdtype1: void|bool|char|int8|int16|int32|int64|float32|float64|typedref|unsigned|object
  keyword_stdtype2: System|Object|ValueType|Enum|Exception|Console|string|valuetype|vararg|bytearray
  keyword_stdtype: '{{keyword_stdtype1}}|{{keyword_stdtype2}}'
  keyword_stdfunc: WriteLine|ReadLine

  inst_load:  ldnull|ldstr|ldloc\.[0-3,s]|ldloc|ldloca|ldc\.i4\.[0-8]|ldc\.i4\.m1|ldc\.i4\.s|ldc\.i4|ldfld|ldflda|ldsfld|ldsflda|ldftn|ldtoken|ldarg.0|ldind\.u8
  inst_store: pop|stloc\.[0-3]|stloc\.s|stloc|stind\.i4|stfld|stsfld
  inst_stack: dup|arglist
  inst_calc: and|add|refanyval
  inst_jump: br\.s|brfalse\.s|brtrue\.s|brfalse|brtrue|br|call|calli|callvirt|ret|catch|leave\.s|leave
  inst_objs: newobj|castclass|box
  inst_all: '{{inst_load}}|{{inst_store}}|{{inst_stack}}|{{inst_calc}}|{{inst_jump}}|{{inst_objs}}'

contexts:
  main:
    - include: pinstruction
    - include: rinstruction
    - include: comments
    - match: '"'
      push: string

  string:
    - meta_scope: string.quoted.double.msil
    - match: \\.
      scope: constant.character.escape.msil
    - match: '"'
      pop: true

  comments:
    - match: '//'
      scope: punctuation.definition.comment.cs
      push:
        - meta_scope: comment.line.double-slash.cs
        - match: $\n?
          pop: true

  pinstruction:
    - match: ^\s*\.
      scope: keyword.control.msil
      push: 
        - meta_content_scope: markup.italic
        - include: pseudo_keywords
        - include: libfiles
        - include: typenames
        - match: \n|\{
          pop: true

  rinstruction:
    - include: label
    - include: instructionline
    - include: typenames
    - include: libfiles
    - match: '{{keyword_stdfunc}}'
      scope: entity.name.tag

  label:
    - match: '^\s*(\w)+:'
      scope: markup.italic

  instructionline:
    - match: \b({{inst_all}})\b
      scope: keyword.operator.msil

  typenames:
    - match: \b({{keyword_stdtype}}(\.|::)?)+
      scope: support.type.msil

  libfiles:
    - match: \b({{keyword_libname}})\b
      scope: entity.name.msil

    - match: \[{{keyword_libname}}\]
      scope: entity.name.msil

  pseudo_keywords:
    - match: '\b({{keyword_pseudo}})\b'
      scope: keyword.control.msil
